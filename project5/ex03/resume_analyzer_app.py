#!/usr/bin/env python3.10
import streamlit as st
import requests
import os
from groq import Groq
from collections import defaultdict

st.title("Análise de currículos")
api_url = "http://127.0.0.1:5000"


def query_groq(sys, user):
    client = Groq(api_key=os.environ.get("GROQ_API_KEY"))
    chat_completion = client.chat.completions.create(
        messages=[
            {"role": "system", "content": sys},
            {"role": "user", "content": user},
        ],
        model="llama-3.1-8b-instant",
    )
    return chat_completion.choices[0].message.content


# Initialize session state
if "access_token" not in st.session_state:
    st.session_state.access_token = None
# Initialize session state
if "search" not in st.session_state:
    st.session_state.search = None
# Initialize session_state for files_to_be_uploaded
if "files_to_be_uploaded" not in st.session_state:
    st.session_state.files_to_be_uploaded = True
if "sumarizer" not in st.session_state:
    st.session_state.sumarizer = """
        Follow the intructions within the xml tags below:
        <role>
            You are a resume analyzer machine. You'll receive a query and
            a context. The context has candidates with skills that are probably
            related to the query. Look for the candidates that have the skill
            specified by the query and sumarize their skills.
        </role>
        <rules>
        - Completely ignore the candidates that don't have the skill
        specified by the query. Don't mention their names AT ALL.
        - The query should be a skill, such as "Python" or "leadership", if
        it's not a skill, politely decline the request and guide them back to
        the main topic: candidate skills.
        - Your answer will ALWAYS be in Brazilian Portuguese.
        - Always start your answers with: "Resumo das habilidades em
        <query> de cada candidato:", unless the query is not related to the
        main topic.
        - Do not ask follow up questions.
        - You'll receive context in the following format:
        <candidate_name>text here</candidate_name>
        - You should follow the examples.
        - No extra text should be added before "Resumo das habilidades...".
        - No extra text should be added after the sumary of the last candidate.
        </rules>
        <examples>
        <correct_query_example>
            <query>
               Java
            </query>
            <your_answer>
                Resumo das habilidades em Java de cada candidato:
                    ...rest of the answer....
            </your_answer>
        </correct_query_example>
        <unrelated_query_example>
            <query>
                Quem foi Thomas Jefferson?
            </query>
            <your_answer>
                Por favor, apenas faça perguntas sobre as
                habilidades dos candidatos.
            </your_answer>
        </unrelated_query_example>
        <correct_answer_format: no extra text added>
        <query>
            Javascript
        </query>
           <your_answer>
            Resumo das habilidades em JavaScript de cada candidato:
            Juliana Gomes: ipsumloremipsumlorem...
            Renato Souza: loremipsumloremimpsum...
            Vinicius Silva: ipsumloremipsumlorem...
           </your_answer>
        </correct_answer_format: no extra text added>
        </examples>
        """
if "reviewer" not in st.session_state:
    st.session_state.reviewer = """
        You are a text reviewer, you will review the text generated by an AI,
        and correct it's mistakes according to the instructions within xml
        tags listed below. You'll use the given context and query as
        references of truth. Write in Brazilian Portuguese only.
        <common_mistakes>
            <example1>
                <mistake>
                    Mentioning the names of candidates that do not have the
                    query skill.
                </mistake>
                <query>
                    Java
                </query>
                <ai_response>
                    Julia Ramos: não foram encontradas menções sobre Java nas
                    habilidades deste candidato.
                    Francisco Souza: este candidato não informou se conhece
                    Java.
                    Enio Pereira: 10 anos de experiência em Java, com Frameworks
                    Spring (...)
                    Jussara Silva: não houve menções explícitas a respeito
                    desta habilidade no currículo de Jussara.
                    Rafael Almeida: Rafael Almeida não tem habilidades
                    explicitamente listadas em Java.
                </ai_response>
                <corrected_text: remove who doesn't have the skill>
                    Enio Pereira: 10 anos de experiência em Java, com
                    os frameworks Spring, ...
                </corrected_text: remove who doesn't have the skill>
            </example1>
                <mistake>
                    Saying that a candidate has a skill that he doesn't have.
                </mistake>
                <query>
                    Python
                </query>
                <context>
                 <Alexandre Pinto>em produção. Especialista em Python,
                  TensorFlow, PyTorch e Scikit-learn, com forte conhecimento em
                  técnicas de aprendizado supervisionado e não
                  supervisionado. Demons abilidades Técnicas
                • Linguagens de programação: Python, SQL, R
                • Frameworks de Machine Learning: TensorFlow, PyTorch, Scikit-learn
                • Ferramentas d</Alexandre Pinto>
                </context>
                <ai_response>
                    Alexandre Pinto: Especialista em Python, com forte conhecimento em Django, PyTorch, TensorFlow e (...)
                </ai_response>
                <corrected_text: using the context as reference, remove from ai response the skills you don't find there>
                    Alexandre Pinto: Especialista em Python, TensorFlow, PyTorch e Scikit-learn, com conhecimento em aprendizado supervisionado e não supervisionado. Ele também domina SQL e R.
                </corrected_text: using the context as reference, remove from ai response the skills you don't find there>
            <example2>
            </example2>
            <example3>
                <mistake>
                    Treating Javascript and Java as the same language.
                </mistake>
                <query>
                    Javascript
                </query>
                <ai_response>
                    Enio Pereira: 10 anos de experiência em Java, Spring, design patterns...
                    Carol Atekita: Dev fullstack com ampla experiência em Javascript e diversos frameworks...
                </ai_response>
                <corrected_text: just remove the Java guys>
                    Carol Atekita: Dev fullstack com ampla experiência em Javascript e diversos frameworks...
                </corrected_text: just remove the Java guys>
            </example3>
        </common_mistakes>
        <example4>
                <mistake>
                    Saying "query" or <query> instead of the corresponding skill.
                </mistake>
                <query>
                    C++
                </query>
                <ai_response>
                    "Resumo das habilidades em <query> de cada candidato:"
                </ai_response>
                <corrected_text>
                    "Resumo das habilidades em C++ de cada candidato:"
                </corrected_text>
        </example4>
        <example5>
            <mistake>
                Repeating the introductory phrase twice or multiple times:
            </mistake>
            <ai_response>
                    Resumo das habilidades em C++ de cada candidato:
                    Resumo das habilidades em C++ de cada candidato:
                        Resumo das habilidades de Vinicius Ribeiro em C++: ipsumloremipsumlorem...
                        Resumo das habilidades de Fernando Silva em C++: ipsumloremipsumlorem...
            </ai_response>
            <corrected_text>
                    Resumo das habilidades em C++ de cada candidato:
                        Vinicius Ribeiro: ipsumloremipsumlorem...
                        Fernando Silva: ipsumloremipsumlorem...
            </corrected_text>
        </example5>
    """

if "cleaner" not in st.session_state:
    st.session_state.cleaner = """
    <role>
        You are a mute text cleaner machine that outputs text without talking
        to the user. Your role is to remove xml tags you find in the text
        you receive.
    </role>
    <example_of_input_to_be_cleaned>
Aqui está a resposta corrigida, de acordo com os exemplos fornecidos:

<corrected_text> Resumo das habilidades em Python de cada candidato:

Ana Ferreira: Utilizou Python para implementar um modelo de detecção de fraude em transações financeiras, alcançando uma taxa de detecção de fraude de 90%. Além disso, desenvolveu um sistema de recomendação de produtos personalizado utilizando Python e bibliotecas como Scikit-learn e TensorFlow, com TensorFlow, PyTorch e Scikit-learn, com foco em aprendizado supervisionado e não supervisionado.

Beatriz Ribeiro: Utilizou Python em um projeto para implementar um sistema de gerenciamento de estoque, integrando APIs de terceiros usando bibliotecas como Requests e JSON, com Python e Django. Além disso, liderou o desenvolvimento de um sistema de recomendação de produtos utilizando Machine Learning com Python e bibliotecas como Scikit-learn, contribuindo para um aumento de 10% nas taxas de conversão.

Bruno Almeida: Utilizou Python em projetos como Data-Driven Credit Implementou um sistema de análise preditiva para otimizar o processo de concessão de crédito, utilizando técnicas de machine learning e modelagem de risco, e Fraud Detection System Desenvolveu um sistema de monitoramento de dados em tempo real para detectar fraudes em transações online.

Rafael Almeida: Aprendeu linguagem de programação Python e sua aplicação no curso superior, e também a utilizou nários para desenvolvimento de um microprojeto, de curso usando Java.

</corrected_text>
</example_of_input_to_be_cleaned>
<example_of_cleaned_output>
Aqui está a resposta corrigida, de acordo com os exemplos fornecidos:

Resumo das habilidades em Python de cada candidato:

Ana Ferreira: Utilizou Python para implementar um modelo de detecção de fraude em transações financeiras, alcançando uma taxa de detecção de fraude de 90%. Além disso, desenvolveu um sistema de recomendação de produtos personalizado utilizando Python e bibliotecas como Scikit-learn e TensorFlow, com TensorFlow, PyTorch e Scikit-learn, com foco em aprendizado supervisionado e não supervisionado.

Beatriz Ribeiro: Utilizou Python em um projeto para implementar um sistema de gerenciamento de estoque, integrando APIs de terceiros usando bibliotecas como Requests e JSON, com Python e Django. Além disso, liderou o desenvolvimento de um sistema de recomendação de produtos utilizando Machine Learning com Python e bibliotecas como Scikit-learn, contribuindo para um aumento de 10% nas taxas de conversão.

Bruno Almeida: Utilizou Python em projetos como Data-Driven Credit Implementou um sistema de análise preditiva para otimizar o processo de concessão de crédito, utilizando técnicas de machine learning e modelagem de risco, e Fraud Detection System Desenvolveu um sistema de monitoramento de dados em tempo real para detectar fraudes em transações online.

Rafael Almeida: Aprendeu linguagem de programação Python e sua aplicação no curso superior, e também a utilizou nários para desenvolvimento de um microprojeto, de curso usando Java.

</example_of_cleaned_output>

As you can see, in the corrected output, you removed the xml tags
from the text and done nothing else.
    """

if "second_cleaner" not in st.session_state:
    st.session_state.second_cleaner = """
    <role>
        You are a mute text cleaner machine that outputs text without talking
        to the user. Your role is to remove excess text you find in the input
        you receive.
    </role>
    <example_of_input_to_be_cleaned>
Aqui está a resposta corrigida, de acordo com os exemplos fornecidos:

Resumo das habilidades em Python de cada candidato:

Ana Ferreira: Utilizou Python para implementar um modelo de detecção de fraude em transações financeiras, alcançando uma taxa de detecção de fraude de 90%. Além disso, desenvolveu um sistema de recomendação de produtos personalizado utilizando Python e bibliotecas como Scikit-learn e TensorFlow, com TensorFlow, PyTorch e Scikit-learn, com foco em aprendizado supervisionado e não supervisionado.

Beatriz Ribeiro: Utilizou Python em um projeto para implementar um sistema de gerenciamento de estoque, integrando APIs de terceiros usando bibliotecas como Requests e JSON, com Python e Django. Além disso, liderou o desenvolvimento de um sistema de recomendação de produtos utilizando Machine Learning com Python e bibliotecas como Scikit-learn, contribuindo para um aumento de 10% nas taxas de conversão.

Bruno Almeida: Utilizou Python em projetos como Data-Driven Credit Implementou um sistema de análise preditiva para otimizar o processo de concessão de crédito, utilizando técnicas de machine learning e modelagem de risco, e Fraud Detection System Desenvolveu um sistema de monitoramento de dados em tempo real para detectar fraudes em transações online.

Rafael Almeida: Aprendeu linguagem de programação Python e sua aplicação no curso superior, e também a utilizou nários para desenvolvimento de um microprojeto, de curso usando Java.

Eu removi os candidatos que não sabem Python, espero que tenha gostado.

</example_of_input_to_be_cleaned>
<example_of_cleaned_output>
Resumo das habilidades em Python de cada candidato:

Ana Ferreira: Utilizou Python para implementar um modelo de detecção de fraude em transações financeiras, alcançando uma taxa de detecção de fraude de 90%. Além disso, desenvolveu um sistema de recomendação de produtos personalizado utilizando Python e bibliotecas como Scikit-learn e TensorFlow, com TensorFlow, PyTorch e Scikit-learn, com foco em aprendizado supervisionado e não supervisionado.

Beatriz Ribeiro: Utilizou Python em um projeto para implementar um sistema de gerenciamento de estoque, integrando APIs de terceiros usando bibliotecas como Requests e JSON, com Python e Django. Além disso, liderou o desenvolvimento de um sistema de recomendação de produtos utilizando Machine Learning com Python e bibliotecas como Scikit-learn, contribuindo para um aumento de 10% nas taxas de conversão.

Bruno Almeida: Utilizou Python em projetos como Data-Driven Credit Implementou um sistema de análise preditiva para otimizar o processo de concessão de crédito, utilizando técnicas de machine learning e modelagem de risco, e Fraud Detection System Desenvolveu um sistema de monitoramento de dados em tempo real para detectar fraudes em transações online.

Rafael Almeida: Aprendeu linguagem de programação Python e sua aplicação no curso superior, e também a utilizou nários para desenvolvimento de um microprojeto, de curso usando Java.
</example_of_cleaned_output>
As you can see in the example, in the corrected output, you should remove any text that might come before "Resumo das habilidades em X de cada candidato:"
and all text that might come after the summary of the last candidate. You say nothing, you only clean the text and return the rest of it exacly as you found it without any extra information.
If there is nothing to be cleaned, you should only return the text exactly as you found it and say nothing.
    """

# User credentials
email = st.text_input("E-mail:")
password = st.text_input("Senha:", type="password")

# REGISTER A NEW USER:
if st.button("Cadastrar"):
    register_response = requests.post(
        f"{api_url}/register", json={"email": email, "password": password}
    )
    if register_response.status_code == 400:
        st.error("Usuário já cadastrado")
    else:
        st.success("Usuário cadastrado com sucesso")

# LOGIN THE USER AND GET THE ACCESS TOKEN
if st.button("Login"):
    login_response = requests.post(
        f"{api_url}/login", json={"email": email, "password": password}
    )
    try:
        st.session_state.access_token = login_response.json()["access_token"]
        st.success("Login successful")
    except KeyError:
        st.error("E-mail ou senha inválidos")


# FILE UPLOAD SECTION
if st.session_state.access_token:
    files = st.file_uploader(
        "Envie os currículos dos candidatos", accept_multiple_files=True
    )
    headers = {"Authorization": f"Bearer {st.session_state.access_token}"}
    if files and st.session_state.files_to_be_uploaded:
        for file in files:
            upload_response = requests.post(
                f"{api_url}/upload_pdf",
                headers=headers,
                files={"file": file},
            )
            if upload_response.status_code == 201:
                st.success(f"{file.name} enviado com sucesso")
            else:
                st.error(f"Erro ao enviar {file.name}")
        st.session_state.files_to_be_uploaded = False
else:
    st.write("Please log in to upload files.")


def create_xml_context(data):
    result = ""
    for name, content_list in data.items():
        content = " ".join(content_list)
        content = content.strip()
        result += f"<{name}>{content}</{name}>"
    return result


# SEMANTIC SEARCH:
search_query = st.text_input("Pesquisar por habilidades:")
if st.button("Pesquisar"):
    response = requests.get(
        f"{api_url}/search?query={search_query}",
        params={"query": search_query},
        headers=headers,
    )
    if response.status_code == 200:
        st.session_state.search = response.json()
    else:
        st.error("Erro ao realizar a pesquisa")

    content_grouped_by_candidate_name = defaultdict(list)
    for chnk in st.session_state.search:
        content_grouped_by_candidate_name[chnk["name"]].append(chnk["content"])

    context = create_xml_context(content_grouped_by_candidate_name)

    print("xml context: " + context)
    user_prompt = f"""
        <context>
            {context}
        </context>
        <query>
            {search_query}
        </query>"""

    llm_response = query_groq(st.session_state.sumarizer, user_prompt)
    user_prompt = f"""
        <context>
            {context}
        </context>
        <query>
            {search_query}
        </query>
        <ai_response>
            {llm_response}
        </ai_response>
        """
    improved_response = query_groq(st.session_state.reviewer, user_prompt)

    user_prompt = f"""
        <input_to_be_cleaned>
            {improved_response}
        </input_to_be_cleaned>
    """

    cleaned = query_groq(st.session_state.cleaner, user_prompt)

    user_prompt = f"""
        <input_to_be_cleaned>
            {cleaned}
        </input_to_be_cleaned>
    """

    cleaned_twice = query_groq(st.session_state.second_cleaner, user_prompt)
    st.write(cleaned_twice)
